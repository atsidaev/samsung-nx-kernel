 /**
 * @file d4_jxr_ctrl_dd.h
 * @brief DRIMe4 JPEG_XR control Device Driver Header
 * @author JinHyoung An <jh0913.an@samsung.com>
 * 2011 Samsung Electronics
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __JXR_CTRL_DD_H__
#define __JXR_CTRL_DD_H__

#include "d4_jxr_if.h"

#define JXR_TOP_REG_BASE 0x500A0000
#define JXR_TOP_REG_SIZE  0x8

#define JXR_INT_STATUS_REG		(0x20)
#define JXR_INT_ENABLE_REG		(0x1C)
#define JXR_CLOCK_ENABLE_CMD	(0x00)
#define JXR_SEL_JPEG_JPEGXR      (0x04)

#define D4_JXR_INT_ENABLE_REG_IMAGE_COMPLETION(val, x)     SET_REGISTER_VALUE(val, x, 1, 1)
#define D4_JXR_INT_ENABLE_REG_FRAME_ERR(val, x)     SET_REGISTER_VALUE(val, x, 4, 1)
#define D4_JXR_INT_ENABLE_REG_TILE_DONE(val, x)     SET_REGISTER_VALUE(val, x, 5, 1)

struct jxr_reg_ctrl_base_info{
	struct device *dev_info;
	unsigned int op_reg_base;   /**< Common Register - Virtual Base Address */
	int irq_num;

	struct JXR_PHYS_REG_INFO physCtrlReg; /**< ACC register - Physical register information */
};

#ifdef __TBD__
/* Taken from FIMP_XRV1.0_QuantMap_Value.xls document - attached as part of jxr user manual */
static unsigned short acEncQuant[255] = {
	0xFFFF,

/*     1       2        3       4       5      6       7        8       9      10       11     12      13      14      15      16    17       18      19     20   */
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8000, 0x8000, 0x8000, 0x8000, 0x5555, 0x5555, 0x5555, 0x5555, 0x4000, 0x4000, 0x4000, 0x4000, 0x3333, 0x3333, 0x3333, 0x3333,
	0x2AAA, 0x2AAA, 0x2AAA, 0x2AAA, 0x2492, 0x2492, 0x2492, 0x2492, 0x2000, 0x2000, 0x2000, 0x2000, 0x1C71, 0x1C71, 0x1999, 0x1999, 0x1745, 0x1745, 0x1555, 0x1555,
	0x13B1, 0x13B1, 0x1249, 0x1249, 0x1111, 0x1111, 0x1000, 0x1000, 0xF0F,	0xE38,	0xD79,	0xCCC,	0xC30,	0xBA2,	0xB21,	0xAAA,	0xA3D,	0x9D8,	0x97B,	0x924,
};

static unsigned short acDecQuant[255] = {
	0x1,

/*   1    2    3    4    5    6    7    8    9   10    11  12    13   14   15  16    17  18   19   20   */
	0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5,
	0x6, 0x6, 0x6, 0x6, 0x7, 0x7, 0x7, 0x7, 0x8, 0x8, 0x8, 0x8, 0x9, 0x9, 0xA, 0xA, 0xB, 0xB, 0xC, 0xC,
	0xD, 0xD, 0xE, 0xE, 0xF, 0xF, 0x10, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C,
};

static unsigned int TileOffset[4][16] = {
	{0x0, 0x1D, 0xE4, 0x187, 0x19C, 0x253, 0x300, 0x3A3, 0x45B, 0x53D, 0x62A, 0x701, 0x7BB, 0x7FB, 0x889, 0x91F},	/* 400 */
	{0x0, 0x32, 0x142, 0x231, 0x256, 0x348, 0x428, 0x4F5, 0x5E7, 0x704, 0x832, 0x948, 0xA44, 0xAA6, 0xB61, 0xC24},/* 420 */
	{0x0, 0x42, 0x1A2, 0x2E8, 0x324, 0x45D, 0x577, 0x685, 0x7D2, 0x935, 0xA99, 0xBE9, 0xD21, 0xD9C, 0xE70, 0xF58},/* 422 */
	{0x0, 0x5B, 0x231, 0x3F3, 0x437, 0x5E4, 0x764, 0x8DB, 0xA9D, 0xC96, 0xE92, 0x1065, 0x1211, 0x12C4, 0x140F, 0x155B} /* 444 */
};
#endif

#ifdef __cplusplus
extern "C" {
#endif

void jxr_set_reg_ctrl_base_info(struct jxr_reg_ctrl_base_info *info);

#ifdef __cplusplus
}
#endif

#endif /* __JXR_CTRL_DD_H__ */

